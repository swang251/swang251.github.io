<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Song Wang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://swang251.github.io/"/>
  <updated>2022-01-21T15:49:58.784Z</updated>
  <id>http://swang251.github.io/</id>
  
  <author>
    <name>Song Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Matlab in Emacs</title>
    <link href="http://swang251.github.io/2021/12/03/Matlab-in-Emacs/"/>
    <id>http://swang251.github.io/2021/12/03/Matlab-in-Emacs/</id>
    <published>2021-12-03T20:10:47.000Z</published>
    <updated>2022-01-21T15:49:58.784Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Why programming and debugging Matlab in Emacs? There are two main reasons:</p><ol type="1"><li>There are no Emacs emulators/keybindings available in Matlab on macOS, which makes Matlab programming less efficient.</li><li>One might need to program and debug Matlab scripts remotely. <span id="more"></span></li></ol><h2 id="introduction">Introduction</h2><p>In order to program Matlab in Emacs, it must be able to</p><ul><li>edit, including basic syntax, warning and error highlight, basic code completion, and</li><li>debug, including running and debugging the scripts and basic command completion.</li></ul><p>These <a href="http://matlab-emacs.sourceforge.net/faq.shtml">features are supported by the MATLAB mode for Emacs</a>, which provides the <code>matlab-mode</code>, <code>matlab-shell</code> and <code>mlint-mode</code>.</p><h2 id="setup">Setup</h2><ol type="1"><li>Intall <code>matlab-mode</code> in Emacs,<ul><li>either from Melpa using package manager, or</li><li>clone the <a href="https://sourceforge.net/p/matlab-emacs/src/ci/master/tree/">repo</a> to a local directory and load it manually in the <code>init.el</code>.</li></ul></li><li>Add the following snippet into the <code>init.el</code> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; associate .m file with the matlab-mode (major mode)</span></span><br><span class="line">(<span class="name">add-to-list</span> &#x27;auto-mode-alist &#x27;(<span class="string">&quot;\\.m$&quot;</span> . matlab-mode))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; setup matlab-shell</span></span><br><span class="line">(<span class="name">setq</span> matlab-shell-command <span class="string">&quot;/Applications/MATLAB_R2021a.app/bin/matlab&quot;</span>)</span><br><span class="line">(<span class="name">setq</span> matlab-shell-command-switches (<span class="name">list</span> <span class="string">&quot;-nodesktop&quot;</span>))</span><br></pre></td></tr></table></figure></li></ol><h2 id="usage">Usage</h2><h3 id="editing">Editing</h3><ul><li>Open a <code>.m</code> file,<ul><li>It should be in <code>matlab-mode</code> with syntax highlights</li><li>The <code>mlint-minor-mode</code> should be associated with <code>matlab-mode</code> and be turned on by default, with warning/error highlights</li></ul></li><li><code>C-M-i</code> to complete symbol (call the function <code>matlab-complete-symbol</code>)</li><li><code>C-M-a</code> and <code>C-M-e</code> to jump to the beginning and end of a function ()</li><li>Jump to the line with warning/error highlights and <code>M-x mlint-show-warning</code> to display the warning/error.</li><li><code>M-x matlab-shell-describe-command</code> (<code>C-h RET f</code>): open the help of a command</li><li><code>M-x matlab-shell-locate-fcn</code> (<code>C-c .</code>): open the corresponding file of the function</li></ul><h3 id="matlab-shell">Matlab-shell</h3><ul><li><code>M-x matlab-shell</code> to open the matlab shell, use it the same as the Command Window in a Matlab application.</li><li>To run commands/scripts, one needs to go to the end of buffer <code>M-&gt;</code>, to the <code>&gt;&gt;</code>, and type the command/script name to run it.</li><li>Press <code>&lt;up&gt;</code> will run the command <code>matlab-shell-previous-matching-input-from-input</code>, and shows previous run commands.</li><li><code>TAB</code> to complete commands</li><li>Variable related commands<ul><li><code>workspace</code> to open the <a href="https://www.mathworks.com/help/matlab/ref/workspace.html">workspace browser</a></li><li><code>who</code> to list all variables in workspace</li><li><code>open &lt;varName&gt;</code> or <code>openvar &lt;varName</code> to open a variable in the variable editor</li></ul></li></ul><h3 id="running-and-debugging-scripts">Running and Debugging Scripts</h3><ul><li><code>Evaluate Section</code> run the commands <code>M-x matlab-shell-run-cell</code> (<code>C-M-return</code>)</li><li><code>Evaluate Selection</code> select lines and run the commands <code>M-x matlab-shell-run-region</code> (<code>C-c C-r</code>)</li><li><code>matlab-emacs</code> use <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html">GUD (Grand Unified Debugger library)</a> to support for debugging<ul><li><code>C-x C-a C-b</code> (<code>gud-break()</code>) to set breakpoints</li><li><code>C-x C-a C-v</code> (<code>gud-list-breakpoints()</code>) to list all breakpoints</li><li><code>C-x C-a C-x</code> (<code>gud-remove()</code>) to remove breakpoints</li></ul></li><li>When the program is running, the script (<code>.m</code> file) will enter <code>matlab-shell-gud-minor-mode</code>, and becomes read-only. Use the following commands for debugging<ul><li><code>h</code>, <strong>open help</strong></li><li><code>b</code> <strong>add breakpoint</strong>, same as <code>C-x C-a C-b</code></li><li><code>x</code> <strong>remove breakpoint</strong>, same as <code>C-x C-a C-x</code></li><li><code>v</code> <strong>list breakpoints</strong>, same as <code>C-x C-a C-v</code></li><li><code>s</code> <strong>step</strong>, same as running <code>dbstep in</code> in the matlab shell</li><li><code>n</code> <strong>next</strong>, same as running <code>dbstep</code> in the matlab shell</li><li><code>f</code> <strong>finish function</strong>, same as running <code>dbstep out</code> in the matlab shell</li><li><code>c</code> <strong>continue</strong>, same as running <code>dbcont</code> in the matlab shell</li><li><code>q</code> <strong>quit</strong>, same as running <code>dbquit</code> in the matlab shell</li></ul></li><li><code>gut-list-breakpoints</code> will open a buffer under <code>mlg-breakpoint-mode</code> listing all breakpoints</li></ul><h2 id="possible-problems">Possible Problems</h2><ul><li>The <code>mlint</code> doesn't show warnings/errors highlights<ul><li><code>M-: matlab-toggle-show-mlint-warnings</code> to toggle it on, or</li><li>add <code>(setq matlab-show-mlint-warnings t)</code> to the <code>init.el</code></li></ul></li><li><code>Error: no MLint program available</code> when trying to toggle on the <code>matlab-toggle-show-mlint-warnings</code> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; setup mlint for warnings and errors highlighting</span></span><br><span class="line">(<span class="name">add-to-list</span> &#x27;mlint-programs <span class="string">&quot;/Applications/MATLAB_R2021a.app/bin/maci64/mlint&quot;</span>) <span class="comment">;; add mlint program for macOS</span></span><br><span class="line">(<span class="name">add-to-list</span> &#x27;mlint-programs <span class="string">&quot;/usr/local/MATLAB/R2021a/bin/glnxa64/mlint&quot;</span>) <span class="comment">;; add mlint program for Linux</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="references">References</h2><ul><li><a href="http://matlab-emacs.sourceforge.net/">MATLAB/Emacs integration project main page</a></li><li><a href="https://www.mathworks.com/matlabcentral/mlc-downloads/downloads/submissions/104/versions/3/previews/matlab-emacs-faq.html">MATLAB/Emacs FAQ</a></li><li><a href="https://sourceforge.net/p/matlab-emacs/src/ci/master/tree/">matlab-emacs git repo</a></li><li><a href="https://blogs.mathworks.com/community/2009/09/14/matlab-emacs-integration-is-back/">Blog - Matlab Emacs Integration Is Back</a></li><li><a href="https://www.emacswiki.org/emacs/MatlabMode">EmacsWiki - Matlab Mode</a></li><li><a href="https://www.mathworks.com/help/matlab/debugging-code.html">Matlab Documentation - Debugging and Analysis</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Why programming and debugging Matlab in Emacs? There are two main reasons:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;There are no Emacs emulators/keybindings available in Matlab on macOS, which makes Matlab programming less efficient.&lt;/li&gt;
&lt;li&gt;One might need to program and debug Matlab scripts remotely.
    
    </summary>
    
    
      <category term="Emacs" scheme="http://swang251.github.io/categories/Emacs/"/>
    
      <category term="Research Daily" scheme="http://swang251.github.io/categories/Emacs/Research-Daily/"/>
    
    
      <category term="Emacs" scheme="http://swang251.github.io/tags/Emacs/"/>
    
      <category term="Matlab" scheme="http://swang251.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>Palabos-OnLatticeBoundaryCondition</title>
    <link href="http://swang251.github.io/2021/05/01/Palabos-OnLatticeBoundaryCondition/"/>
    <id>http://swang251.github.io/2021/05/01/Palabos-OnLatticeBoundaryCondition/</id>
    <published>2021-05-01T19:56:19.000Z</published>
    <updated>2021-08-10T00:27:03.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>The boundary conditions implemented in Palabos can be generally divided in two categories</p><ol type="1"><li><p><code>OnLatticeBoundaryCondition</code>, mainly implemented in <strong>src/boundaryCondition/</strong></p></li><li><p><code>OffLatticeModel</code>, mainly implemented in <strong>src/offLattice/</strong></p></li></ol><p>This article mainly focuses on the <code>OnLatticeBoundaryCondition</code>.</p><p><img src="/images/Palabos-OnLatticeBoundaryCondition/OnLatticeBoundaryCondition.png" alt="Class Diagram" /> <span id="more"></span></p><h2 id="basic-structure">Basic structure</h2><ul><li>Here follows some key points of the structure:<ol type="1"><li><code>OnLatticeBoundaryCondition2D</code> is the base class, and is the one that is "visible" to users. It provides the functions to be called directly by users like<ul><li><code>setVelocityConditionOnBlockBoundaries()</code></li><li><code>setPressureConditionOnBlockBoundaries()</code></li></ul></li><li>The instantiator <code>BoundaryConditionInstantiator2D</code> inherits from <code>OnLatticeBoundaryCondition2D</code><ul><li>The instantiator to me is a glue that binds the implementation to the user interface.</li><li>The instantiator helps hide the detailed boundary implementation from the user. It provides specific boundary setup corresponding to different boundary positions in the domain.</li><li>It integrates the boundary condition to the main simulation setup by setting a composite dynamics using <code>setCompositeDynamics()</code>, and may (not) integrate a boundary functional through <code>integrateProcessingFunctional()</code></li><li>The instantiator <code>BoundaryConditionInstantiator2D</code> takes a <strong>Boundary Manager</strong> as one of its template parameters, and such a Boundary Manager is in charge of actual boundary operations.</li></ul></li><li><code>creatXXXBoundaryCondition2D()</code> is a factory funtion that returns an instance of <code>BoundaryConditionInstantiator2D</code>. One may find examples stored in <code>/src/boundaryCondition/boundaryCondition2D</code> like<ul><li><code>createLocalBoundaryCondition2D()</code></li><li><code>createDynamicsBasedLocalBoundaryCondition2D()</code></li><li><code>createEquilibriumBoundaryCondition2D()</code></li><li><code>createInterpBoundaryCondition2D()</code></li></ul>or others like <code>createZouHeBoundaryCondition2D()</code> saved separately in <code>/src/boundaryCondition/zouHeBoundary2D.h</code></li><li>The <strong>Boundary Manager</strong> is the core of boundary condition implementation.<ul><li>The boundary instantiator makes use of the boundary manager by taking it as a template parameter.</li><li>There are two different ways of implementing the boundary condition:<ul><li>create a composite dynamics</li><li>create a processor (boundary functional)</li></ul></li><li>The boundary condition normally has both a <strong>dynamics</strong> class (<code>XXXBoundaryDynamics</code>) and a <strong>processor</strong> class (<code>XXXBoundaryFunctional2D</code>)</li></ul></li></ol></li></ul><h2 id="take-zouheboundary2d-as-an-example">Take <code>zouHeBoundary2D</code> as an example</h2><ol type="1"><li>The factory functions are in <code>/src/boundaryCondition/zouHeBoundary2D.h</code> named<ul><li><code>createZouHeBoundaryCondition2D()</code></li><li><code>createDynamicsBasedZouHeBoundaryCondition2D()</code></li></ul></li><li>Each factory function returns a instance of <code>BoundaryConditionInstantiator2D</code> with different <em>Boundary Managers</em><ul><li><code>WrappedZouHeBoundaryManager2D</code></li><li><code>ZouHeBoundaryManager2D</code></li></ul></li><li>Each Boundary Manager has a series of functions named <code>getVelocityBoundaryDynamics()</code>, <code>getVelocityBoundaryFunctional()</code> and so on. Take the velocity boundary condition as an example, it returns (or not) either<ul><li><code>ZouHeVelocityDynamics</code>, or</li><li><code>WrappedLocalBoundaryFunctional2D</code></li></ul></li><li>No matter how, they all leads to the <code>ZouHeClosure</code> function saved in <code>/src/boundaryCondition/zouHeDynamics.hh</code>, where the core of the algorithm sits.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The boundary conditions implemented in Palabos can be generally divided in two categories&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;OnLatticeBoundaryCondition&lt;/code&gt;, mainly implemented in &lt;strong&gt;src/boundaryCondition/&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;OffLatticeModel&lt;/code&gt;, mainly implemented in &lt;strong&gt;src/offLattice/&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This article mainly focuses on the &lt;code&gt;OnLatticeBoundaryCondition&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Palabos-OnLatticeBoundaryCondition/OnLatticeBoundaryCondition.png&quot; alt=&quot;Class Diagram&quot; /&gt;
    
    </summary>
    
    
      <category term="Palabos" scheme="http://swang251.github.io/categories/Palabos/"/>
    
    
      <category term="Palabos" scheme="http://swang251.github.io/tags/Palabos/"/>
    
      <category term="Design Patterns" scheme="http://swang251.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>initializeAtEquilibrium() in Palabos</title>
    <link href="http://swang251.github.io/2021/04/22/initializeAtEquilibrium-in-Palabos/"/>
    <id>http://swang251.github.io/2021/04/22/initializeAtEquilibrium-in-Palabos/</id>
    <published>2021-04-23T00:32:01.000Z</published>
    <updated>2021-04-24T18:56:58.688Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>I've discussed the structure of the data processor execution in a <a href="https://swang251.github.io/2018/08/28/The-guide-for-the-Data-Processor-structure-of-Palabos/">previous article</a>. Today let's take a look at a certain type of the data processors: <strong>data initializer</strong>.</p><span id="more"></span><p>There are many data initializers implemented in <code>src/dataProcessors/dataInitializerWrapperXD.h/hh</code>. I'll take one of them, <code>initializeAtEquilibrium()</code>, as an example here.</p><h2 id="overloads-of-initializeatequilibrium">Overloads of <code>initializeAtEquilibrium()</code></h2><ul><li><p>Taking the 2D version as an example, there are four overloads that are categorized into two types.</p><ol type="1"><li>Two of them accept <strong>constant</strong> <code>density</code> and <code>velocity</code> and applied constants to all cells. <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializeAtEquilibrium</span><span class="params">(BlockLattice2D&lt;T,Descriptor&gt;&amp; lattice, Box2D domain,T density, Array&lt;T,<span class="number">2</span>&gt; velocity, T temperature = (T)<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializeAtEquilibrium</span><span class="params">(MultiBlockLattice2D&lt;T,Descriptor&gt;&amp; lattice, Box2D domain, T density, Array&lt;T,<span class="number">2</span>&gt; velocity, T temperature = (T)<span class="number">1</span>)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>It calls <code>applyProcessingFunctional()</code></li><li>It is based on the functional <code>IniConstEquilibriumFunctional2D</code></li></ul></li><li>Two of them accept a <strong>function object</strong> <code>RhoUFunction</code> and provides a cell-dependent initialization. <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>, <span class="keyword">class</span> <span class="title">RhoUFunction</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializeAtEquilibrium</span><span class="params">(BlockLattice2D&lt;T,Descriptor&gt;&amp; lattice, Box2D domain, RhoUFunction f)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">template&lt;typename T, template&lt;class U&gt; class Descriptor, class RhoUFunction&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializeAtEquilibrium</span><span class="params">(MultiBlockLattice2D&lt;T,Descriptor&gt;&amp; lattice, Box2D domain, RhoUFunction f)</span></span></span><br></pre></td></tr></table></figure><ul><li>It calls <code>applyIndexed()</code>, a wrapper of <code>applyProcessingFunctional()</code></li><li>It is based on the functional <code>IniCustomEquilibriumFunctional2D</code></li></ul></li></ol></li><li>For each type, there are two versions, one for <code>MultiblockLattice2D</code> and one for <code>BlockLattice2D</code>.</li><li><p>As I've discussed a lot about the general <code>applyProcessingFunctional</code> in the previous article, I will focus on the more interesting cell-dependent version initializer.</p></li></ul><h2 id="function-object">Function Object</h2><ul><li>For the cell-dependent version, it needs to initialize each cell of the domain with a cell (position)-dependent value. This is achieved by passing a function object <code>RhoUFunction</code> into the <code>initializeAtEquilibrium()</code> function. <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This function is implemented in-place, because it cannot be precompiled due to its generic nature.</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>, <span class="keyword">class</span> <span class="title">RhoUFunction</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializeAtEquilibrium</span><span class="params">(MultiBlockLattice2D&lt;T,Descriptor&gt;&amp; lattice, Box2D domain, RhoUFunction f)</span></span></span><br></pre></td></tr></table></figure></li><li><code>RhoUFunction f</code> is an <a href="https://docs.microsoft.com/en-us/cpp/standard-library/function-objects-in-the-stl?view=msvc-160">function object</a><ul><li><blockquote><p>A <em>function object</em>, or <em>functor</em>, is any type that implements operator(). This operator is referred to as the call operator or sometimes the application operator. The C++ Standard Library uses function objects primarily as sorting criteria for containers and in algorithms.</p></blockquote></li><li><blockquote><p>Function objects provide two main advantages over a straight function call. The first is that a function object can contain state. The second is that a function object is a type and therefore can be used as a template parameter.</p></blockquote></li></ul></li><li>As mentioned above, the function object can be used as a template parameter as it is shown in the above snippet.</li><li>The <code>RhoUFunction</code> is a class member of the functional <code>IniCustomEquilibriumFunctional2D</code>, is called in side <code>functional-&gt;execute()</code>.</li><li>A typical functor <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// A functional, used to create an initial condition for the density and velocity</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoiseuilleVelocityAndDensity</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(plint iX, plint iY, T&amp; rho, Array&lt;T,<span class="number">2</span>&gt;&amp; u)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assign values to rho and u.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="cell-dependent-functional">Cell-dependent functional</h2><ul><li><code>IniCustomEquilibriumFunctional2D</code> is<ul><li>declared in <em>src/dataProcessors/dataInitializerFunctional2D.h</em></li><li>implemented in <em>src/dataProcessors/dataInitializerGenerics2D.h</em> (the file name sounds weird though, I guess &quot;generic&quot; means cell-dependent?)</li></ul></li><li><code>IniCustomEquilibriumFunctional2D : OneCellIndexedFunctional2D</code></li><li><code>OneCellIndexedFunctional2D</code> has the member function <code>execute(iX, iY, cell)</code> which is overridden in the subclass.<ul><li>where: <em>src/dataProcessors/dataInitializerFunctional2D.h/hh</em></li></ul></li><li><strong><code>execute()</code> is the place to implement the algorithm</strong>.</li></ul><h2 id="applyindexed-a-wrapper-of-applyprocessingfunctional"><code>applyIndexed</code> a wrapper of <code>applyProcessingFunctional</code></h2><ul><li><code>applyIndexed</code> is a wrapper of <code>applyProcessingFunctional</code></li><li>It builds a <code>GenericIndexedLatticeFunctional2D</code> that is inherited from <code>BoxProcessingFunctional2D_L</code></li><li><code>GenericIndexedLatticeFunctional2D</code> includes the private class member <code>OneCellIndexedFunctional2D* f</code>, which is <code>IniCustomEquilibriumFunctional2D</code></li><li>The key idea of <code>GenericIndexedLatticeFunctional2D</code> is the overridden <code>process()</code> loops through the domain and call the <code>f-&gt;execute()</code> at each cell.</li><li>where<ul><li><code>src/dataProcessors/dataInitializerWrappers2D.hh</code></li></ul></li></ul><h2 id="more-about-the-structure-three-cell-related-functionals">More about the structure: three cell-related functionals</h2><ul><li>One-cell functional<ol type="1"><li><code>OneCellFunctional2D</code></li><li><code>OneCellIndexedFunctional2D</code></li><li><code>OneCellIndexedWithRandFunctional2D</code></li></ol></li><li>Generic lattice functional, which takes one-cell functional as a private class member <code>f</code>. Such a functional overrides the <code>process()</code> so that execute <code>f-&gt;execute()</code> at each cell of the domain<ol type="1"><li><code>GenericLatticeFunctional2D</code></li><li><code>GenericIndexedLatticeFunctional2D</code></li><li><code>GenericIndexedWithRandLatticeFunctional2D</code></li></ol></li><li>Functional Wrapper, that calls <code>applyProcessingFunctional()</code> with the functional<ol type="1"><li><code>apply()</code></li><li><code>applyIndexed()</code><ol type="1"><li>take <code>GenericIndexedLatticeFunctional2D</code></li><li>take <code>GenericIndexedWithRandLatticeFunctional2D</code></li></ol></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I&#39;ve discussed the structure of the data processor execution in a &lt;a href=&quot;https://swang251.github.io/2018/08/28/The-guide-for-the-Data-Processor-structure-of-Palabos/&quot;&gt;previous article&lt;/a&gt;. Today let&#39;s take a look at a certain type of the data processors: &lt;strong&gt;data initializer&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Palabos" scheme="http://swang251.github.io/categories/Palabos/"/>
    
    
      <category term="Palabos" scheme="http://swang251.github.io/tags/Palabos/"/>
    
      <category term="C++" scheme="http://swang251.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Specific admittance of the wall for modeling the thermoviscous losses</title>
    <link href="http://swang251.github.io/2021/01/16/Specific-admittance-of-the-wall-for-modeling-the-thermoviscous-losses/"/>
    <id>http://swang251.github.io/2021/01/16/Specific-admittance-of-the-wall-for-modeling-the-thermoviscous-losses/</id>
    <published>2021-01-17T02:09:12.000Z</published>
    <updated>2021-01-17T17:07:34.858Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>The derivation of the specific admittance of the wall for modeling the thermoviscous losses can be found in Pierce's book, <em>Acoustics: An Introduction to Its Physical Principles and Applications</em> (2019, 3rd edition). This article is to note down the derivation with the key steps and equations copied from the book.</p><span id="more"></span><h2 id="derivation">Derivation</h2><p>The derivation is explained in Chapter 10.4, <em>Acoustic Boundary-Layer Theory</em>, while the entire Chapter 10 is about <em>Effects of Viscosity and Other Dissipative Processes</em>.</p><ul><li><blockquote><p>At frequencies of normal interest, any disturbance governed by the linear equations derived in the previous setion can be considered as a superposition of <strong>vorticity</strong>, <strong>entropy</strong>, and <strong>acoustic</strong> <em>modal wave fields</em>.</p></blockquote></li><li><p>The linear equations mentioned here refer to the <em>mass conservation equation</em>, <em>Navier-Stokes equation</em>, and the <em>Kirchhoff Fourrier equation</em>. (Eq. 10.2.2)</p></li><li><p>The derivation starts from the notation <span class="math inline">\(\psi_n(\boldsymbol{x},t) = \text{Re}\{\hat{\psi}_n e^{-i\omega t} e^{i\boldsymbol{k}\cdot\boldsymbol{x}}\}\)</span>, Eq. (10.3.1), where <span class="math inline">\(\psi_n\)</span> can be the plane-wave disturbance of either of the three modal wave fields mentioned above.</p></li><li><blockquote><p>There are only a small number of <span class="math inline">\(k^2\)</span> for a given <span class="math inline">\(\omega\)</span> for which a nontrivial solution (at least one <span class="math inline">\(\hat{\psi}_n\)</span> not zero) exists.</p></blockquote></li><li><blockquote><p>The resulting relations between <span class="math inline">\(k^2\)</span> and <span class="math inline">\(\omega\)</span> are the <em>dispersion relations</em> for the possible modes of propagation.</p></blockquote></li><li>Three different modes correspond to three different <strong>dispersion relations</strong>, leading to three different <strong>PDEs</strong>, where the nontrivial solution exists.<ul><li>Vorticity mode: <span class="math inline">\(k^2 = i\omega\rho/\mu\)</span> (<span class="math inline">\(\nabla\times\boldsymbol{v}\neq 0\)</span>, <span class="math inline">\(\boldsymbol{k\cdot v}=0\)</span>) <span class="math display">\[\nabla^2\boldsymbol{v}_{vor} = \dfrac{\rho}{\mu}\dfrac{\partial \boldsymbol{v}_{vor}}{\partial t}\qquad \text{(Eq. 10.3.11)}\]</span></li><li>Acoustic Mode: Eq. (10.3.7a) (<span class="math inline">\(\boldsymbol{k\times v} = 0\)</span>) <span class="math display">\[\nabla^2 p_{ac} - \dfrac{1}{c^2}\dfrac{\partial^2 p_{ac}}{\partial t^2} + \dfrac{2}{c^4}\delta_{cl}\dfrac{\partial^3 p_{ac}}{\partial t^3} = 0, \qquad \text{(Eq. 10.3.13)}\]</span></li><li>Entropy Mode: Eq. (10.3.7b), or <span class="math inline">\(k^2\approx i\omega\rho c_p/\kappa\)</span> (<span class="math inline">\(\boldsymbol{k\times v} = 0\)</span>) <span class="math display">\[\nabla^2s_{ent} = \dfrac{\rho c_p}{\kappa}\dfrac{\partial s_{ent}}{\partial t}\qquad\text{(Eq. 10.3.15)}\]</span></li></ul></li><li><blockquote><p>Any superposition of vorticity-, acoustic-, and entropy-mode fields will satisfy the linear equations for a fluid with finite viscosity and thermal conductivity. ... any disturbance satisfying those equations can be represented as such a superposition, ... <span class="math display">\[\boldsymbol{v} = \boldsymbol{v}_{vor}+ \boldsymbol{v}_{ac} + \boldsymbol{v}_{ent}\qquad \text{(Eq. 10.4.1)}\]</span></p></blockquote></li><li>Boundary layer thickness, determined by <span class="math inline">\(1/|k_l|\)</span>, where <span class="math inline">\(k_l\)</span> is calculated using the dispersion relations.<ul><li><span class="math inline">\(l_{vor} = \sqrt{\dfrac{2\mu}{\omega\rho}}\)</span>, <strong>N.B., there is a typo in the book</strong></li><li><span class="math inline">\(l_{ent} = \sqrt{\dfrac{2\kappa}{\omega\rho c_p}} = \dfrac{l_{vor}}{\sqrt{\text{Pr}}}\)</span></li><li>Question: why not use <span class="math inline">\(2\pi/|k_l|\)</span> to define the boundary layer thickness as <span class="math inline">\(k_l\)</span> is the wavenumber.</li></ul></li><li>The field varies much more rapidly with the <span class="math inline">\(z\)</span> coordinate than with the <span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span> coordinates (<span class="math inline">\(\partial/\partial z &gt; \partial/\partial x \sim \partial/\partial y\)</span>), as the sound wavelength is much larger then <span class="math inline">\(l_{vor}\)</span> and <span class="math inline">\(l_{ent}\)</span>, so the <span class="math inline">\(\nabla^2\)</span> is approximated by <span class="math inline">\(\partial^2/\partial z^2\)</span> in Eq. 10.3.11 and Eq. 10.3.15, and leads to<ul><li><span class="math display">\[\dfrac{\partial^2}{\partial z^2}\hat{\psi}(x,y,z) = -\dfrac{2i}{l^2}\hat{\psi}(x,y,z)\qquad\text{(Eq. 10.4.5)}\]</span> with the solution <span class="math display">\[\hat{\psi}(x,y,z) = \hat{\psi}(x,y,0)e^{-(1-i)z/l}\qquad\text{(Eq. 10.4.6)}\]</span> (substitute Eq. (10.4.6) into Eq. (10.4.5) will lead to the <span class="math inline">\(-2i/l^2\)</span> on the LHS) with</li><li><span class="math inline">\(l= l_{vor}\)</span> or <span class="math inline">\(l_{ent}\)</span>, and</li><li><span class="math inline">\(\hat{\psi}=\hat{s}_{ent}\)</span> or <span class="math inline">\(\hat{\boldsymbol{v}}_{vor}\)</span>.</li></ul></li><li>The <span class="math inline">\(\partial/\partial z\)</span> is replaced with <span class="math inline">\(-(1-i)/l\)</span> based on Eq. 10.4.6</li><li><p>Based on the polarization relations $_{vor} =0 $ and <span class="math inline">\(\boldsymbol{v}_{ent} \approx \left(\dfrac{\beta T \kappa}{\rho c^2_p}\right)_o\nabla s_{ent}\)</span>, and the fact that <span class="math inline">\(\nabla = \nabla_T + \nabla_\boldsymbol{n}\)</span>, the Eq. (10.4.7) can be derived</p></li><li>Assume the surface is oscillating as a rigid body such that every material point on the surface has a verlocity with complext amplitude <span class="math inline">\(\hat{v}_{wall}\)</span>, <span class="math display">\[\hat{\boldsymbol{v}}_{wall} = \hat{\boldsymbol{v}}_{vor} + \hat{\boldsymbol{v}}_{ac} + \hat{\boldsymbol{v}}_{ent} \qquad\text{(Eq. 10.4.8)}\]</span></li><li><span class="math inline">\(\nabla_T\cdot(\text{10.4.8})\)</span> + Eq. (10.4.7a) leads to Eq. (10.4.10) which express <span class="math inline">\(\hat{\boldsymbol{v}}_{vor}\)</span> in terms of <span class="math inline">\(\hat{\boldsymbol{v}}_{ac,T}\)</span> <span class="math display">\[\hat{\boldsymbol{v}}_{vor}  = -\dfrac{1+i}{2}l_{vor}\nabla_T\cdot\hat{\boldsymbol{v}}_{ac,T}\qquad\text{Eq.a}\]</span></li><li>Take the normal component of Eq. 8 <span class="math inline">\(\rightarrow(\text{Eq. 10.4.8}\cdot\boldsymbol{n})\)</span>,<ul><li>Applying Eq. a, Eq. 10.4.7c, Eq. 10.3.14, leads to the boundary condition **<strong>Eq. 10.4.12</strong>, expressing <span class="math inline">\(\hat{\boldsymbol{v}}_{wall}\cdot\boldsymbol{n}\)</span> only in terms of acoustic variables <span class="math inline">\(\hat{\boldsymbol{v}}_{ac}\)</span> and <span class="math inline">\(\hat{p}_{ac}\)</span></li><li>It allows an examination of the effects of <em>viscosity</em> and <em>thermal</em> condition on the reflection of plane waves.</li></ul></li><li>Rewrite the Euler's equation <span class="math display">\[\nabla_T\cdot\boldsymbol{v}_{ac,T} = -\dfrac{\sin^2\theta_i}{\rho c^2}\dfrac{\partial p}{\partial t}\qquad\text{(Eq.10.4.17)}\]</span></li><li><p>Inserting Eq. 10.4.17 into Eq. 10.4.12 leads to the specific admittance of the surface <span class="math display">\[\dfrac{1}{Z} = Y = -\dfrac{\hat{\boldsymbol{v}}_{ac}\cdot\boldsymbol{n}_{wall}}{\hat{p}} = \dfrac{1}{2}(1-i)\dfrac{\omega}{\rho c^2}[l_{vor}\sin^2\theta_i + (\gamma-1)l_{ent}]\qquad\text{(10.4.18)}\]</span></p></li></ul><h2 id="different-expressions">Different expressions</h2><p>The definitions of the specific admittance of the wall are different between Chaigne &amp; Kergomard (2016) and Pierce (2019)</p><ul><li><p>Chaigne &amp; Kergomard (2016): <span class="math display">\[Y_p = \dfrac{1}{\rho c}\sqrt{\dfrac{j\omega}{c}}[\sin^2\theta\sqrt{l_v} + \sqrt{l_t}] \qquad (5.141)\]</span> where the characteristic lengths <span class="math inline">\(l_v = \dfrac{\mu}{\rho c}\)</span> and <span class="math inline">\(l_t = \dfrac{\kappa}{\rho c C_p}\)</span> in Eq. (5.136), are defined differently with <span class="math inline">\(l_{vor}\)</span> and <span class="math inline">\(l_{ent}\)</span>.</p></li><li>Pierce (2019): <span class="math display">\[\dfrac{1}{Z} = \dfrac{1}{2}(1-i)\dfrac{\omega}{\rho c^2}[l_{vor}\sin^2\theta_i+(\gamma-1)l_{ent}]\qquad (10.4.18)\]</span></li><li><p>Rewrite Eq. (10.4.18) in terms of variables defined in Chaigne &amp; Kergomard's book <span class="math display">\[\dfrac{1}{Z} = \dfrac{1}{\rho c}\dfrac{1-i}{1+i}\sqrt{\dfrac{j\omega}{c}}[\sin^2\theta\sqrt{l_v} + \sqrt{l_t}]\qquad Eq. (b)\]</span></p></li><li>Comparing Eq. (b) and Eq. (5.141), the difference is the term <span class="math inline">\(\dfrac{1-i}{1+i}\)</span> in Eq. (b).<ul><li>If the <span class="math inline">\(1-i\)</span> in Eq. (10.4.18) is <span class="math inline">\(1+i\)</span>, then the definitions in two books are identical to each other.</li></ul></li><li><p>After tracing back the derivations in Pierce (2019), I found the origin of the <span class="math inline">\(1-i\)</span> comes from the definition of the <strong>phaser</strong>.</p></li><li>In Kinsler (1999) Fundamentals of acoustics, Ch. 1.5, it is mentioend there are different conventions to represent the time dependence of scillatory functions<ul><li><em>the engineering convention</em>: <span class="math inline">\(\exp(j\omega t)\)</span></li><li><em>the physics convention</em>: <span class="math inline">\(\exp(-i\omega t)\)</span></li></ul></li><li>In Chaigne &amp; Kergomard's book, it is defined as <span class="math inline">\(\psi = \hat{\psi}e^{j\omega t}\)</span>, while in the Pierce's book, it is defined as <span class="math inline">\(\psi = \hat{\psi}e^{-i\omega t}\)</span>. It is this difference that leads to the differences in the definition of the wall losses</li><li>Different conventions are also reflected in the definition of the wave number involving the attenuation coefficient as shown in Eq. (10.5.10) in Pierce's book, which can be used to calculate <span class="math inline">\(\Gamma\)</span> for the transfer matrix of a cylinder. <span class="math display">\[k = \omega/c + (1+i)\alpha_{walls} \qquad \text{(10.5.10) in Pierce&#39;s book}\]</span><ul><li>If the engineering convention is applied, Eq. 10.5.10 becomes, <span class="math inline">\(k=\omega/c + (1-i)\alpha_{walls}\)</span>, which is the one used in some papers,<ul><li>Van Walstijn, M. et al. (2005) Wideband measurement of the acoustic impedance of tubular objects</li><li>Mason, W.P. (1928) The propagation characteristics of sound tubes and acoustic filters</li></ul></li></ul></li></ul><h2 id="references">References</h2><ul><li>https://www.comsol.com/blogs/theory-of-thermoviscous-acoustics-thermal-and-viscous-losses/</li><li>Pierce, A. D., 2019, Acoustics: An Introduction to Its Physical Principles and Applications, Springer International Publishing.</li><li>Chaigne, A., and Kergomard, J., 2016, Acoustics of Musical Instruments, Springer-Verlag, New York.</li><li>Kinsler, L. E., Frey, A. R., Coppens, A. B., and Sanders, J. V., 1999, Fundamentals of Acoustics, Wiley.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The derivation of the specific admittance of the wall for modeling the thermoviscous losses can be found in Pierce&#39;s book, &lt;em&gt;Acoustics: An Introduction to Its Physical Principles and Applications&lt;/em&gt; (2019, 3rd edition). This article is to note down the derivation with the key steps and equations copied from the book.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Acoustics" scheme="http://swang251.github.io/categories/Acoustics/"/>
    
    
      <category term="Acoustics" scheme="http://swang251.github.io/tags/Acoustics/"/>
    
  </entry>
  
  <entry>
    <title>The Jet-Drive Model</title>
    <link href="http://swang251.github.io/2020/09/30/The-Jet-Drive-Model/"/>
    <id>http://swang251.github.io/2020/09/30/The-Jet-Drive-Model/</id>
    <published>2020-09-30T22:20:20.000Z</published>
    <updated>2020-10-18T14:52:51.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Modeling the flute exitation is complex. There exiting two main models, i.e., <em>the jet-drive model</em> and <em>the discrete vortex model</em>. Let's talk about the jet-drive model for now.</p><span id="more"></span><h2 id="general-sound-generation-mechanisms">General Sound Generation Mechanisms</h2><p>The earliest attemps to study the flute-like instrument sound generation trace back to the work by Helmholtz (1877) and Rayleigh (1877), in their own celebrated books. The details within the instrument is more and more revealed recently thanks to the study by different researchers, like A. Hirschberg, B. Fabre, M. P. Verge, to name a few, even though there are still many puzzles left to be solved.</p><p>In general, the air blown out of the player's mouth passes through a flue channel, either a flue canal of a recorder or the one constrained by the player's lip, and forms a jet. The jet starts to oscillate with transverse perturbations contributed either by the acoustic field feed-back, the jet's intrinsic instability or the hydrodynamic direct feedback from the labium. Such an oscillation or perturbation will evolve and grow while convected by the jet from the flue channel exit toward the labium (a sharp edge). The jet will then hit the labium and apply a force on it, and the reacting force from the labium to the fluid acts as the acoustic source that sustains the acoustic oscillation inside the flute.</p><h2 id="the-flute-model">The Flute Model</h2><p>Based on the sound generation mechanisms, there are several key components need to be modeled and the most popular and easiest way to do that is modeling each component separately and lump them together. Such a lumped model is widely applied in different studies as well as synthesis, even though questioned by some researchers (Fabre et al. 2000).</p><p>Here is a list of the components to be modeled:</p><ul><li>Jet formation</li><li>Jet receptivity</li><li>Jet instability</li><li>Sound source</li><li>Vortices</li><li>Turbulence</li></ul><h2 id="the-jet-formation">The Jet Formation</h2><ul><li>The flow passes from the player's mouth or the organ's foot through the lip or flue channel. A jet is formed when the flow comes out of the channel.</li><li>The jet speed is determined by the pressure difference <span class="math inline">\(\Delta p_{jet} = p_f - p_w\)</span> across the flue channel and its profile depends on the geometry of the channel, where <span class="math inline">\(p_m\)</span> is the foot pressure and <span class="math inline">\(p_w\)</span> is the pressure at the window.</li><li>Sometimes people call <span class="math inline">\(p_f\)</span> the cavity pressure <span class="math inline">\(p_c\)</span> and <span class="math inline">\(p_w\)</span> can be called as mouth pressure <span class="math inline">\(p_m\)</span> (the mouth represents the window of the instrument instead of the player's mouth).</li><li>unsteady Bernoulli equation <span class="math display">\[\rho_0 l_c \dfrac{dU_j}{dt} + \dfrac{1}{2}\rho_0U_j^2 = p_f - p_w\]</span></li><li>The jet flow is a function of <span class="math inline">\(y\)</span>, written as <span class="math inline">\(U(y)\)</span>.</li><li>The volume flow rate is noted as <span class="math inline">\(Q_j\)</span></li><li>Part of the air will goes into the instrument <span class="math inline">\(Q_{in}\)</span> and the rest goes out <span class="math inline">\(Q_{out}\)</span>.<ul><li>The <span class="math inline">\(Q_{in}\)</span> sees the impedance (or admittance) of the pipe <span class="math inline">\(Z_p\)</span></li><li>The <span class="math inline">\(Q_{out}\)</span> sees the window impedance <span class="math inline">\(Z_w\)</span> which includes the radiation impedance as well as the end correction near the window.</li></ul></li></ul><h2 id="the-jet-profile">The Jet Profile</h2><ul><li>THE PROFILE OF the jet <span class="math inline">\(U(y)\)</span> depends on the upstream setup as well as the geometry of the channel. The most popular velocity profile is the Bickley velocity profile, defined as <span class="math display">\[U(y) = U_0\, \text{sech} ^2 (y/b)\]</span><ul><li>where half width of the profile <span class="math inline">\(b = 2h/5\)</span> is a Poseuille flow is assumed at the flue exit and <span class="math inline">\(h\)</span> is the flue channel height, and <span class="math inline">\(U_0\sim U_j\)</span> is the centerline velocity that is assimilated to the jet velocity <span class="math inline">\(U_j\)</span>.</li></ul></li></ul><h2 id="the-jet-oscillation">The Jet Oscillation</h2><ul><li>The jet starts to oscillate due to the disturbation by the acoustic transverse velocity as a result of the acoustic feedback.</li><li>The jet receptivity:</li><li>The receptivity is modeled by a parameter <span class="math inline">\(\eta(t)\)</span> defined as the jet lateral displacement when the jet arrives at the labium.</li><li>The contribution to <span class="math inline">\(\eta\)</span> mainly comes from the acoustic perturbation and the hydrodynamic feedback (Verge (1997)). Fletcher proposed a model to describe the receptivity and instability as <span class="math display">\[\eta = \dfrac{V_{ac}}{i\omega}(1-\cosh(\mu x))e^{-i\omega(t-x/c_p)}\]</span> which is then modified by Verge <span class="math display">\[\eta = \dfrac{V_{ac}}{i\omega}(1-\cosh(\alpha W))e^{-i\omega W/u}\]</span> where <span class="math inline">\(\mu\)</span> and <span class="math inline">\(u\)</span> is a function of the Strouhal number (Verge et al. 1997)</li><li>A simpler model is proposed by de la Cuadra in his thesis (2006) <span class="math display">\[\eta(t,x) = e^{\alpha_i x}\eta_0(t-x/c_p)\]</span> with <span class="math display">\[\dfrac{\eta_0}{h} = \dfrac{v_{ac}(t)}{U_j}\]</span><ul><li><span class="math inline">\(\alpha_i = \beta/h\)</span>: the empirical coefficient corresponding to the jet amplification</li><li><span class="math inline">\(c_p = \gamma U_j\)</span>: the empirical coefficient corresponding to the phase velocity of a perturbation along the jet.</li><li><span class="math inline">\(\beta \sim 0.5\)</span>: jet spatial amplification</li><li><span class="math inline">\(\gamma \sim 0.4\)</span>: the relative convection velocity</li></ul></li></ul><h2 id="the-jet-drive-model">The Jet-Drive Model</h2><ul><li>Coltman (1968, 1976) is the first one who proposed the jet drive model.</li><li>The fluctuating part of the inward and outward flow <span class="math inline">\(Q_{in}&#39;\)</span> and <span class="math inline">\(Q_{out}&#39;\)</span> are complementary to each other (<span class="math inline">\(Q_{in}&#39; = -Q_{out}&#39;\)</span>). (They are more commonly noted as <span class="math inline">\(Q_1\)</span> and <span class="math inline">\(Q_2\)</span>).</li><li>Assuming the air to be incompressible in between the two flow injection points of <span class="math inline">\(Q_{in}&#39;\)</span> and <span class="math inline">\(Q_{out}&#39;\)</span>, and apply the third Newton's law to the air mass, we get <span class="math display">\[\Delta p = -\dfrac{\rho \delta_d}{S_w}\dfrac{dQ_{in}&#39;}{dt} = -\dfrac{\rho \delta_d}{S_w}\dfrac{dQ_{in}}{dt}\]</span><ul><li><span class="math inline">\(S_w\)</span> is the window area</li><li><span class="math inline">\(\delta_d\)</span> is the effective acoustical &quot;distance&quot; between the two sources, calculated as <span class="math inline">\(\delta_d = 4\pi\sqrt{2hW}\)</span> as proposed by Verge (1994), where <span class="math inline">\(h\)</span> is the distance from the source to the tip of the labium.</li></ul></li><li><span class="math inline">\(Q_{in}\)</span> depends on the jet profile as well as the jet lateral displacement <span class="math inline">\(\eta(t)\)</span> <span class="math display">\[\displaystyle Q_{in}(t) = H_m\int_{-\infty}^{y_{off}-\eta(t)}U(y)dy\]</span><ul><li>where <span class="math inline">\(y_{off}\)</span> is the offset between the channel exit and the labium tip in <span class="math inline">\(y\)</span> axis</li><li><span class="math inline">\(H_w\)</span> the window width</li></ul></li></ul><h2 id="the-jet-resonator-interaction">The Jet-Resonator Interaction</h2><p>This might be the trickest part of the model and its slightly different from paper to paper.</p><ul><li><p>In general, the jet-resonator interaction is based on the <span class="math inline">\(\Delta p\)</span> from the jet-drive model and the admittance <span class="math inline">\(Y\)</span> of the resonator, while <span class="math inline">\(Y\)</span> includes the pipe admittance as well as the end correction around the embouchure.</p></li><li>In Auvray (2012, 2014)'s papers,<ul><li><span class="math inline">\(\Delta p = p^+ - p^-\)</span> where <span class="math inline">\(p^+\)</span> and <span class="math inline">\(p^-\)</span> corresponds to the pressure at the inward and outward sides of the source, and they share the same (acoustic) velocity <span class="math inline">\(v_{ac}\)</span>.</li><li><span class="math inline">\(Y = v_{ac} / \Delta p\)</span></li><li>It is not clear about the definition of <span class="math inline">\(v_{ac}\)</span> in this paper as it is also used as the transverse velocity to calculate the <span class="math inline">\(\eta_0\)</span>. But it seems like they are the same thing in Auvray's paper (2012) which is a little difficult to understand.</li><li>In de La Cuadra's thesis, v_{ac} is simply the acoustic velocity at the entrance of the pipe, corresponding to <span class="math inline">\(Q_p/S\)</span> in Verge's paper.</li></ul></li><li>In Verge (1997)'s papers,<ul><li><span class="math inline">\(P_p\)</span> and <span class="math inline">\(P_m\)</span> might correspond to <span class="math inline">\(p^+\)</span> and <span class="math inline">\(p^-\)</span> in Auvray's papeers, are the pressure at the entrance of the pipe and the pressure at the mouth/exit of the flue channel, respectively.</li><li>The pressure relationship is built as <span class="math display">\[p_p - p_m = -\dfrac{\rho_0\delta_{in}}{S_m}\dfrac{dQ_{in}}{dt} + \Delta p\]</span></li><li><span class="math inline">\(\Delta p = p_p - p_m + \dfrac{\rho_0\delta_{in}}{S_m}\dfrac{dQ_{in}}{dt} \neq p_p - p_m\)</span></li><li><span class="math inline">\(Q_p(0) = Q_{in}(0)\)</span></li><li><span class="math inline">\(Q_{in}\)</span> flow entering the <span class="math inline">\(\delta_{in}\)</span> part of the mouth end correction, <span class="math inline">\(Q_{1}\)</span> flow entering the pipe at the labium.</li><li>It should be safe to announce <span class="math inline">\(Q_p = Q_{in} = Q_1\)</span> based on the mass conservation.</li><li><span class="math inline">\(v_{ac}\)</span>, the transverse acoustic velocity is defined as <span class="math inline">\(v_m&#39;\)</span> in Verge's paper <span class="math display">\[v_m&#39; = \dfrac{2}{\pi}\dfrac{Q_p}{S_m} - \dfrac{0.38Q_1&#39;}{S_m},\]</span> where <span class="math inline">\(Q_1&#39; = Q_1 - \frac{1}{2}bHU_0\)</span></li></ul></li></ul><h2 id="the-jet-related-sound-source">The Jet-Related Sound Source</h2><ul><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Modeling the flute exitation is complex. There exiting two main models, i.e., &lt;em&gt;the jet-drive model&lt;/em&gt; and &lt;em&gt;the discrete vortex model&lt;/em&gt;. Let&#39;s talk about the jet-drive model for now.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Acoustics" scheme="http://swang251.github.io/categories/Acoustics/"/>
    
    
      <category term="Acoustics" scheme="http://swang251.github.io/tags/Acoustics/"/>
    
      <category term="Musical Acoustics" scheme="http://swang251.github.io/tags/Musical-Acoustics/"/>
    
      <category term="Wind Instrument" scheme="http://swang251.github.io/tags/Wind-Instrument/"/>
    
      <category term="Flute" scheme="http://swang251.github.io/tags/Flute/"/>
    
  </entry>
  
  <entry>
    <title>The role of the vortex - sound generative or dissipative?</title>
    <link href="http://swang251.github.io/2020/09/22/The-role-of-the-vortex/"/>
    <id>http://swang251.github.io/2020/09/22/The-role-of-the-vortex/</id>
    <published>2020-09-23T00:20:48.000Z</published>
    <updated>2020-09-23T02:13:13.982Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>We know that the vortex is generative based on the vortex sound theory. We also know that the vortex is dissipative at the end of the orifice. Is the vortex acoustic generative or dissipative?</p><span id="more"></span><h2 id="generative-vortices">Generative Vortices</h2><p>Let's start with the role of the vorticity in generating the sound.</p><ul><li>The vortex sound equation: <span class="math display">\[\begin{equation}\left(\dfrac{D}{Dt}\left(\dfrac{1}{c^2}\dfrac{D}{Dt} \right) - \dfrac{1}{\rho}\nabla\cdot(\rho\nabla) \right)B = \dfrac{1}{\rho}\nabla\cdot(\rho\boldsymbol{\omega}\times \boldsymbol{v})\end{equation}\]</span><ul><li><blockquote><p>Lighthill's equation can be recast in a form that emphasizes the prominent role of vorticity in the production of sound by taking the <strong>total enthalpy</strong> as the independent acoustic variable, in place of Lighthill's <span class="math inline">\(c_0^2(\rho-\rho_0)\)</span> -- <em>Howe, M. (Theory of Vortex Sound)</em></p></blockquote></li><li><a href="https://en.wikipedia.org/wiki/Enthalpy">Enthalpy</a>: &quot;is defined as the sum of the system's internal energy and the product of its pressure and volume. The pressure-volume term expresses the work required to establish the system's physical dimensions, i.e. to make room for it by displacing its environment.&quot; <em>Enthalpy = internal energy + work required to establish the system's physical dimensions.</em></li><li><a href="https://en.wikipedia.org/wiki/Stagnation_enthalpy">Total Enthalpy</a>: <span class="math inline">\(\displaystyle B = \int\dfrac{dp}{\rho} + \dfrac{1}{2}v^2\)</span></li><li>It is IMPORTANT to notice the following things:<ol type="1"><li>Originally proposed by Powell, the vortex sound equation is a reformation of the Lighthill's equation, which means it is applied to the <strong>unbounded homentropic flow</strong>.</li><li>It is based on the <strong>low Mach number approximation</strong></li><li>The term <span class="math inline">\(\nabla\cdot(\rho_0\boldsymbol{\omega}\times \boldsymbol{v})\)</span> is the <strong>dominant component of the Lighthill quadrupole</strong> <span class="math inline">\(\dfrac{\partial^2(\rho v_iv_j)}{\partial x_i\partial x_j}\)</span></li></ol></li></ul></li></ul><p>By the way,</p><ul><li>The equations in the wave equation format, i.e., Lighthill's equation and the vortex sound is derived by combining the continuity equation and the momentum equation.</li><li>Crocc's equation is simply the <strong>Crocco's form</strong> of the <strong>momentum equation</strong> with the emphasis on the vorticity.</li></ul><h2 id="dissipative-vortices">Dissipative Vortices</h2><p>Now, let's see why the vortices are acoustical dissipative as well.</p><p>In general, it is because</p><blockquote><p>acoustic energy is expended in the generation of vorticity at an edge or corner, and the mean flow convects away the vorticity into regions where it can no longer continue to interact significantly with the acoustic field, and where its kinetic energy is ultimately dissipated as heat.</p></blockquote><ul><li>Based on Howe, M. (1980), the absorbed acoustic energy is written as <span class="math display">\[\begin{equation}\displaystyle\pi_T = \int\rho_0\boldsymbol{\omega}\times\boldsymbol{u&#39;} \text{d}^3\boldsymbol{x} = -\int\varepsilon_{ij}\rho_0v_iv_j \text{d}^3\boldsymbol{x}\end{equation}\]</span><ul><li>where <span class="math inline">\(\boldsymbol{u&#39;}\)</span> is the <em>acoustic</em> particle velocity, <span class="math inline">\(\boldsymbol{v}\)</span> is the velocity and <span class="math inline">\(\varepsilon_{ij}\)</span> is the <em>acoustic</em> rate of the strain tensor</li></ul></li></ul><p>As you might have noticed, the term (1) <span class="math inline">\(\rho_0\boldsymbol{\omega}\times\boldsymbol{u&#39;}\)</span> resembles the term <span class="math inline">\(\rho_0\boldsymbol{\omega}\times\boldsymbol{v}\)</span> in the vortex sound equation, only by replacing <span class="math inline">\(\boldsymbol{v}\)</span> with the acoustic counterpart <span class="math inline">\(\boldsymbol{u}&#39;\)</span>. The term (2) <span class="math inline">\(\varepsilon_{ij}\rho_0v_iv_j\)</span> is also simply the product of the low Mach number Lighthill stress tensor <span class="math inline">\(\rho_0v_iv_j\)</span> and the acoustic rate of the strain tensor.</p><p>For both term (1) and (2), their counterparts in the generative case correspond to source term or RHS of the vortex sound equation and the Lighthill's equation, which describe the energy transfering from the fludic field to the acoustic field. Instead, term (1) and (2) is the other way round, the energy goes from the acoustic field to the fluidic field, or in other words, the acoustic energy is dissipated.</p><p>Actually, there is another way to understand quickly the dissipative characteristic of the vortex.</p><p>The velocity is related to the scalar potention <span class="math inline">\(\phi\)</span> and the stream function <span class="math inline">\(\boldsymbol{A}\)</span> <span class="math display">\[\begin{equation}\boldsymbol{v} = \nabla\phi + \nabla\times\boldsymbol{A}\end{equation}\]</span> where <span class="math inline">\(\nabla\phi = \boldsymbol{u}\)</span> is the irrotational field and the <span class="math inline">\(\nabla\times\boldsymbol{A}\)</span> is the solenoidal field.</p><p>The acoustic field is irrotational as <span class="math inline">\(u&#39; = \nabla\phi&#39;\)</span>. The vorticity field is solenoidal as <span class="math inline">\(\boldsymbol{\omega} = \nabla\times \boldsymbol{v} =\nabla\times \nabla\times \boldsymbol{v}\)</span>, since <span class="math inline">\(\nabla(\nabla\times f) = \nabla\times(\nabla f) = 0\)</span>.</p><p>When the kinetic energy is conserved, it simply flows from <span class="math inline">\(\nabla\times\boldsymbol{A}\)</span> (solenoidal/vorticity) to the <span class="math inline">\(\nabla\phi\)</span> (irrotational/acoustic) when the sound is generated and the other way round when the sound is dissipated.</p><h2 id="reference">Reference</h2><ul><li>[1] Howe, M. S., 2003, Theory of Vortex Sound, Cambridge University Press.</li><li>[2] Howe, M. S., 1980, “The Dissipation of Sound at an Edge,” Journal of Sound and Vibration, 70(3), pp. 407–411.</li><li>[3] Hirschberg, A., and Rienstra, S. W., 2004, “An Introduction to Aeroacoustics,” Eindhoven university of technology.</li><li>[4] Kühnelt, H., 2016, “Studying the Vortex Sound of Recorder- and Flute-like Instruments by Means of the Lattice Boltzmann Method and Helmholtz Decomposition,” University of Music and Performing Arts Vienna.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We know that the vortex is generative based on the vortex sound theory. We also know that the vortex is dissipative at the end of the orifice. Is the vortex acoustic generative or dissipative?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Acoustics" scheme="http://swang251.github.io/categories/Acoustics/"/>
    
    
      <category term="Acoustics" scheme="http://swang251.github.io/tags/Acoustics/"/>
    
      <category term="Aero-acoustics" scheme="http://swang251.github.io/tags/Aero-acoustics/"/>
    
  </entry>
  
  <entry>
    <title>Update Hexo</title>
    <link href="http://swang251.github.io/2020/06/04/Update-Hexo/"/>
    <id>http://swang251.github.io/2020/06/04/Update-Hexo/</id>
    <published>2020-06-04T18:57:29.000Z</published>
    <updated>2020-06-04T20:20:32.009Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>At first, all I want is making the <a href="https://hexo.io/docs/asset-folders.html">asset folder</a> work, then I tried to update hexo and met a series of problem and got them solved.</p><span id="more"></span><h2 id="conflication-of-hexo-generator-feed-and-hexo-3">Conflication of hexo-generator-feed and hexo 3</h2><h3 id="problem">Problem</h3><p>The first problem I met is shown as following <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Template render error: (unknown path) [Line 8, Column 25]</span><br><span class="line">  Error: Unable to call &#96;the return value of (posts[&quot;first&quot;])[&quot;updated&quot;][&quot;toISOString&quot;]&#96;, which is undefined or falsey</span><br></pre></td></tr></table></figure></p><h3 id="solution">Solution</h3><ul><li><p>I found a <a href="https://github.com/iissnan/theme-next-docs/issues/79">issue</a> stating the same problem and <a href="https://github.com/iissnan/theme-next-docs/issues/79#issuecomment-287474959">it was answered</a> that the plugin <code>hexo-generator-feed</code> and <code>hexo-generator-sitemap</code> is incompatible with <code>Hexo 3</code></p></li><li><p><a href="http://mixoo.cn/2020/02/08/hexo-tempalte-render-error/">someone uninstalls these plugins to solve the problem</a> which doesn't work for me as <a href="https://github.com/tufu9441/maupassant-hexo">maupassant-hexo</a> requires <code>hexo-generator-feed</code>.</p></li><li>As stated in the <a href="https://github.com/hexojs/hexo-generator-feed"><code>hexo-generator-feed</code> repo</a>:<ul><li>Hexo 4: 2.x</li><li>Hexo 3: 1.x</li><li>Hexo 2: 0.x</li></ul></li><li>While my version in <code>package.json</code> is <code>&quot;hexo&quot;: &quot;^3.2.0&quot;</code> and <code>&quot;hexo-generator-feed&quot;: &quot;^1.2.2&quot;</code>. I am guessing that update <code>hexo</code> and <code>hexo-generator-feed</code> might help solve the problem.</li><li>And yes, when I have Hexo: 4.2.1 and hexo-generator-feed: 2.2.0, it is solved automatically.</li><li><p><code>npm rebuild node-sass --force</code>.</p></li></ul><h2 id="updating-node-and-hexo">Updating node and Hexo</h2><h3 id="updating-node.js">Updating Node.js</h3><ul><li>Newer version of <code>node.js</code> is needed for updating Hexo.</li><li>I forgot how I install my <code>node</code> originally. Here reinstalled it as follows<ol type="1"><li><code>which node</code></li><li><code>sudo rm -rf /usr/local/bin/node</code></li><li><code>sudo rm -rf /usr/loca/lib/node_modules/npm/</code></li><li><code>brew doctor</code></li><li><code>brew cleanup --prune-prefix</code></li><li><code>brew install node</code></li></ol></li><li><a href="https://stackoverflow.com/a/26919540/5798355">Uninstall node.js on OSX</a>.</li></ul><h3 id="brew-link-node"><code>Brew link node</code></h3><ul><li>Then I try to make the link use the command <code>brew link node</code> which shed me the error <code>Error: Could not symlink include/node/common.gypi</code>.</li><li>The solution is <a href="https://discourse.brew.sh/t/mac-osx-homebrew-error-could-not-symlink-include-node-common-gypi/4717">here</a><ol type="1"><li><code>sudo chown -R $(whoami) /usr/local/*</code>: change the owner of the files (root) to myself <code>$(whoami)</code>, otherwise, I couldn't rm <code>.gypi</code>, refer to <a href="https://discourse.brew.sh/t/mac-osx-homebrew-error-could-not-symlink-include-node-common-gypi/4717/5">here</a> and <a href="https://gist.github.com/rcugut/c7abd2a425bb65da3c61d8341cd4b02d">here</a></li><li><code>rm '/usr/local/include/node/config.gypi'</code></li><li><code>brew link --overwrite node</code></li></ol></li><li>Then I met the <a href="https://stackoverflow.com/questions/47306169/npm-version-is-giving-errormodule-js538-throw-err-error-cannot-find-modul">problem</a> when using <code>npm</code>, giving me the error <code>modeule.js:538 throw err;</code><ul><li>This is <strong>solved</strong> by reinstalling the node using homebrew.</li></ul></li></ul><h3 id="update-hexo">Update hexo</h3><ul><li>modify the <code>package.json</code> and use the command <code>npm update</code> in the terminal.</li></ul><h2 id="downgrading-node">Downgrading node</h2><ul><li>When I try to deploy <code>hexo d</code>, it gave me the error <code>TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object</code></li><li>This is because the <a href="https://zhuanlan.zhihu.com/p/136552969">version of <code>Node.js</code> is too high</a> and we need to downgrade it.</li><li><a href="https://medium.com/@georgeenathomas/3-step-process-to-downgrade-node-version-using-homebrew-bc0b0a72ae27">Downgrading through <code>brew</code></a><ol type="1"><li><code>brew unlink node</code></li><li><code>brew install node@12</code></li><li><code>brew link node@12</code>: failed</li><li><code>brew link --overwrite node@12</code></li></ol></li></ul><h2 id="about-node.js-npm">About Node.js &amp; NPM</h2><h3 id="node.js">Node.js</h3><ul><li><p><a href="https://en.wikipedia.org/wiki/Node.js">Node.js wiki</a> &gt; Node.js is an open-source, cross-platform, <strong>JavaScript runtime environment</strong> that executes JavaScript code <strong>outside a web browser</strong>.</p></li><li><a href="https://nodejs.org/en/about/">About Node.js</a>, JavaScript runtime, asynchronous event-driven, concurrency etc.</li><li><a href="https://www.tutorialspoint.com/nodejs/nodejs_introduction.htm">tutorialspoint - introduction to Node.js</a></li><li><p><a href="https://www.sitepoint.com/node-js-is-the-new-black/"><em>Node.js is the New Black</em> by Louis Simoneau in July 2010</a></p></li></ul><h3 id="npm">npm</h3><ul><li>node.js package manager.</li><li>write packages needed into <code>package.json</code> and run <code>npm install</code> or <code>npm update</code>. All the packages are inside <code>node_modules</code>.</li><li>An alternative: <a href="https://yarnpkg.com/">yarn</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;At first, all I want is making the &lt;a href=&quot;https://hexo.io/docs/asset-folders.html&quot;&gt;asset folder&lt;/a&gt; work, then I tried to update hexo and met a series of problem and got them solved.&lt;/p&gt;
    
    </summary>
    
    
      <category term="daily" scheme="http://swang251.github.io/categories/daily/"/>
    
    
      <category term="Hexo" scheme="http://swang251.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Manage Your Own Package in Spacemacs</title>
    <link href="http://swang251.github.io/2020/05/29/Manage-Your-Own-Package-in-Spacemacs/"/>
    <id>http://swang251.github.io/2020/05/29/Manage-Your-Own-Package-in-Spacemacs/</id>
    <published>2020-05-29T19:53:05.000Z</published>
    <updated>2020-05-29T20:27:42.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>How to manage your own package or the one your forked in Spacemacs? The answer is the <em>layer</em>. <span id="more"></span></p><h2 id="create-your-layer">Create your layer</h2><ul><li><code>M-x</code> + <code>configuration-layer/create-layer</code></li><li>select <code>~/.spacemacs.d</code></li><li>The layer <code>&lt;layerName&gt;</code> is created with <code>packages.el</code> and/or <code>README.org</code> (depends on your choice).</li><li>add your layer <code>&lt;layerName&gt;</code> into the variable <code>dotspacemacs-configuration-layers</code> in <code>~/.spacemacs.d/init.el</code></li></ul><h2 id="manage-your-packages-in-packages.el">Manage your packages in <code>packages.el</code></h2><ul><li><code>packages.el</code> contains a list of packages and their configuaration functions (init, post-init, etc...)</li><li>Add your packages into <code>packages.el</code> following the grammar in the <a href="https://develop.spacemacs.org/doc/LAYERS.html#packagesel">documentation</a><ul><li>Spacemacs supports different recipes to install a package. For managing our own package, we need to maintain it locally instead of remotely. This way, you would be able to debug and make sure it is working before your push it.</li><li>For local multi-file package, one has to use <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(package-name :location (recipe :fetcher local))</span><br></pre></td></tr></table></figure></li><li>Initialize the package by adding <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(defun layerName&#x2F;init-packageName ()</span><br><span class="line">    (use-package packageName</span><br><span class="line">  :init)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></li><li><strong>IMPORTANT:</strong> Multi-file local package is not supported yet byf the stable version Spacemaces. To make it work, one has to follow the <a href="https://github.com/syl20bnr/spacemacs/pull/8718">issues #8718</a> and fix the corresponding files. Otherwise, clone the develop branch.</li></ul></li><li>Local packages should reside at <code>&lt;layerName&gt;/local/&lt;packageName&gt;</code>, git repository can be created within this folder.</li><li>See <a href="https://develop.spacemacs.org/doc/DOCUMENTATION.html#configuration-layers">Configuration layers</a> for more details</li></ul><h2 id="ref">Ref</h2><ul><li><a href="http://book.emacs-china.org/#orgheadline88">Spacemacs Rocks Season 2</a></li><li><a href="https://emacs-china.org/t/hack-package/2716">Discussion in Emacs China</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;How to manage your own package or the one your forked in Spacemacs? The answer is the &lt;em&gt;layer&lt;/em&gt;.
    
    </summary>
    
    
      <category term="Emacs" scheme="http://swang251.github.io/categories/Emacs/"/>
    
    
      <category term="Emacs" scheme="http://swang251.github.io/tags/Emacs/"/>
    
  </entry>
  
  <entry>
    <title>How do I use Zotero?</title>
    <link href="http://swang251.github.io/2020/01/07/How-do-I-use-Zotero/"/>
    <id>http://swang251.github.io/2020/01/07/How-do-I-use-Zotero/</id>
    <published>2020-01-07T15:30:24.000Z</published>
    <updated>2020-05-07T02:01:54.942Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>I used Endnote as my first reference management software when I started my master study. I also tried a little bit Mendeley and saw how well it is intrinsically coupled Elsevier publications and the PDF editor. However, I finally decided to use <a href="https://www.zotero.org/">Zotero</a> mainly because it is an open-source software and is more flexible.</p><span id="more"></span><h2 id="workflow">Workflow</h2><ul><li>Read the <a href="https://www.zotero.org/support/start">documentation</a></li><li><a href="https://www.zotero.org/support/adding_items_to_zotero">Adding Items to Zotero</a><ul><li>We need to install the <em>Zotero Connector</em> for Chrome, Firefox, or other web browsers.</li><li>We need to launch the Zotero desktop application before he could save items to Zotero.</li></ul></li><li><a href="https://www.zotero.org/support/attaching_files#adding_files">Adding files to items</a><ul><li>the <em>Zotero Connector</em> provides an automatic routine to save the PDF to the Zotero.</li><li>However, I personally prefer to &quot;manually&quot; save the PDFs using <a href="#zotfile">ZotFile</a>.</li></ul></li><li>Organize your PDFs: see <a href="#pdf-organization">below</a></li><li>Adding notes to items: here I list two options<ul><li><a href="https://daringfireball.net/projects/markdown/syntax">Markdown</a>: use <a href="#markdown-here"><em>Markdown Here</em></a></li><li><a href="https://orgmode.org/">Org mode</a>: use <a href="#org-mode"><em>.org</em></a> attachments</li></ul></li></ul><h2 id="attachementspdfs-organization">Attachements/PDFs Organization</h2><p>There are two options here to manage your attachments: <a href="https://www.zotero.org/support/attaching_files#stored_files_and_linked_files">stored files and linked files</a>.</p><h3 id="save-and-sync-the-attachements-in-your-zotero-library">Save and sync the attachements in your Zotero library</h3><ul><li>All your attachments will be stored in <code>$&#123;Zotero&#125;\storage</code> (set your Data Directory Location in <code>preference</code>-<code>Advanced</code>-<code>Files and Folders</code>), since everything is coded and automatically organized, you will see a series of folders likely named as <code>2NEHBKP9</code>.</li><li>Zotero allows you to sync your files/attachements in My Library. All the attachements you put under the items can be synchronized to the <a href="https://www.zotero.org/storage">Zotero Storage</a> or your own WebDAV.<ul><li>You can modify it by going to the <code>preference</code> <span class="math inline">\(\rightarrow\)</span> <code>Sync</code> <span class="math inline">\(\rightarrow\)</span> <code>Settings</code> <span class="math inline">\(\rightarrow\)</span> <code>File Syncing</code></li><li>Check/uncheck the <code>Sync attachement files in My Library using</code></li><li>Select <code>Zotero</code> or <code>WebDAV</code>.</li><li>If you select <code>WebDAV</code>, you will need to provide your account infomation.<ul><li>Here is how it works using <a href="https://www.jianguoyun.com">Jianguoyun</a>: <a href="http://help.jianguoyun.com/?p=2064">坚果云第三方应用授权WebDAV开启方法</a></li></ul></li></ul></li></ul><p><strong>However, there are two limitation of the this method:</strong></p><ul><li>Zotero storage is not free</li><li>The cloud storage you are using, like <a href="https://help.dropbox.com/installs-integrations/third-party/webdav-or-ftp">Dropbox, doesn't support WebDAV</a></li></ul><p>So here is another way to organize and sync your attachements.</p><h3 id="save-the-links-to-the-pdfs-in-your-zotero-library.">Save the links to the PDFs in your Zotero library.</h3><p>Zotero allows you to store the link to files in My Library.</p><ul><li>Set the set your <a href="https://www.zotero.org/support/preferences/advanced#linked_attachment_base_directory">base directory</a> by going to the <code>Preference</code> <span class="math inline">\(\rightarrow\)</span> <code>Advanced</code> <span class="math inline">\(\rightarrow\)</span> <code>Files and Folders</code> <span class="math inline">\(\rightarrow\)</span> <code>Linked Attachment Base Directory</code>. This way, links are stored as the relative path in your library so that is easier when you access the linked files on different computers.</li><li>Use ZotFile for a linked-file workflow</li></ul><h3 id="zotfile">ZotFile</h3><blockquote><p><a href="http://zotfile.com/">ZotFile</a> is a Zotero plugin to manage your attachments: automatically rename, move, and attach PDFs (or other files) to Zotero items, sync PDFs from your Zotero library to your (mobile) PDF reader (e.g. an iPad, Android tablet, etc.) and extract annotations from PDF files.</p></blockquote><ul><li>ZotFile Preferences <span class="math inline">\(\rightarrow\)</span> Renaming Rules</li><li>ZotFile Preferences <span class="math inline">\(\rightarrow\)</span> General Setting<ul><li>Source Folder for Attaching New Files: makes it easier to attach newly downloaded files.<ul><li>Download PDF <span class="math inline">\(\rightarrow\)</span> select the paper item <span class="math inline">\(\rightarrow\)</span> right click: Attach New File (ZotFile)</li></ul></li><li>Location of Files<ul><li>Attach stored copy of file(s)</li><li>Custom Location:<ul><li>Use subfolder defined by <code>/%F</code></li></ul></li></ul></li></ul></li></ul><h2 id="note-management">Note Management</h2><h3 id="markdown-here">Markdown Here</h3><blockquote><p><a href="https://markdown-here.com/">Markdown Here</a> is an extension for Chrome, Firefox, Safari, Opera, Thunderbird, and Postbox.</p></blockquote><ul><li>One can <a href="https://github.com/jlegewie/markdown-here#building-the-extension-bundles">build the extension bundle</a> from the source code and generate the <code>.xpi</code> file for Zotero</li><li>Then in Zotero, go to Tools <span class="math inline">\(\rightarrow\)</span> Add-on <span class="math inline">\(\rightarrow\)</span> Install Add-on From File...</li><li>When you edit the note, go to File <span class="math inline">\(\rightarrow\)</span> Markdown Toggle or use the hotkey <code>Ctrl+Alt+M</code> to switch back and forth between the plain and the rendered text</li></ul><h3 id="org-mode">Org-mode</h3><blockquote><p><a href="https://orgmode.org/">Org mode</a> is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.</p></blockquote><p>I started to use Org mode in 2018 and gradually fall in love with it. To me, there is no substitute of Org mode. I tried different markdown softwares like Quiver, Joplin, etc. They are good, (especially the Joplin) but they cannot replace Org mode. Everything is foldable in Org mode which makes it much easier to explore and organize the documents. Also, considering how painful it is to keep notes in the Zotero-note, even with the <a href="https://markdown-here.com/">Markdown Here</a>, I decided to find a way out to use Org mode for writing reading summaries and notes which can be integrated with Zotero.</p><ul><li>create a <code>noteTemplate.org</code></li><li>Everytime you will add the note by<ul><li>Right click on items <span class="math inline">\(\rightarrow\)</span> Add Attachment <span class="math inline">\(\rightarrow\)</span> Attach Stored Copy of File <span class="math inline">\(\rightarrow\)</span> Select the <code>noteTemplate.org</code></li><li>Right click on <code>.org</code> file under the item <span class="math inline">\(\rightarrow\)</span> Rename File from Parent Metadata</li></ul></li></ul><h3 id="zotxt">Zotxt</h3><blockquote><p><a href="https://gitlab.com/egh/zotxt-emacs">zotxt-emacs</a> works with zotxt to provide an Emacs integration with Zotero, allowing you to manage citation keys for pandoc markdown documents as well as org mode links to items in your Zotero collection. - Check <a href="http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/">this article</a> about using Zotxt</p></blockquote><h2 id="other">Other</h2><h3 id="better-bibtex-for-zotero">Better BibTeX for Zotero</h3><blockquote><p><a href="https://retorque.re/zotero-better-bibtex/">Beter BibTex (BBT)</a> is an extension for Zotero and Juris-M that makes it easier to manage bibliographic data, especially for people authoring documents using text-based toolchains (e.g. based on LaTeX / Markdown). - Automatically exports the <code>.bib</code> file and organizes the citation key.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I used Endnote as my first reference management software when I started my master study. I also tried a little bit Mendeley and saw how well it is intrinsically coupled Elsevier publications and the PDF editor. However, I finally decided to use &lt;a href=&quot;https://www.zotero.org/&quot;&gt;Zotero&lt;/a&gt; mainly because it is an open-source software and is more flexible.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Research Daily" scheme="http://swang251.github.io/categories/Research-Daily/"/>
    
    
      <category term="Emacs" scheme="http://swang251.github.io/tags/Emacs/"/>
    
      <category term="Zotero" scheme="http://swang251.github.io/tags/Zotero/"/>
    
      <category term="Org-mode" scheme="http://swang251.github.io/tags/Org-mode/"/>
    
  </entry>
  
  <entry>
    <title>Building a Personal Palabos Git Repository</title>
    <link href="http://swang251.github.io/2019/12/17/Building-a-Personal-Palabos-Git-Repository/"/>
    <id>http://swang251.github.io/2019/12/17/Building-a-Personal-Palabos-Git-Repository/</id>
    <published>2019-12-17T06:05:22.000Z</published>
    <updated>2020-06-14T00:42:16.866Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://palabos.unige.ch/">Palabos</a> just released a new version (v2.1r0) and pushed everything on <a href="https://gitlab.com/unigespc/palabos">GitLab</a>. This is something that all the Palabos community used to looking forward and makes it easier for the users to get official updates and contribute their own code. Personally, I would like to build my own Palabos version with in-house developed code while keeping updated from the official one. In this post, I am trying to talk about the Git workflow I use, which is mainly based on the <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow">Feature Branch Workflow</a> and the <a href="https://nvie.com/posts/a-successful-git-branching-model/">Git Workflow</a>. <img src="/images/20191217/PalabosGitFlow.jpg" /> <span id="more"></span></p><h2 id="requirements">Requirements</h2><p>The workflow has to at least fulfill the following requirements.</p><ul><li>Allow private development: researchers might want to develop and test their own algorithms on Palabos. Some of the algorithms may not have been published yet. It is therefore reasonable to keep the repository private.</li><li>Allow easy merge requests: This is about implementations of published algorithms or some complement functions/dataProcessors that should definitely be contributed to the official Palabos version.</li><li>Allow updates from the UniGeSPC/Palabos: keep the personal repository up-to-date with the official one.</li><li>Allow bug fixed both committed to the private and the official repositories.</li></ul><h2 id="forked-project">Forked Project</h2><ul><li>Firstly, <a href="https://docs.gitlab.com/ee/gitlab-basics/fork-project.html">fork</a> the project <a href="https://gitlab.com/unigespc/palabos">UniGeSPC/palabos</a>. After this, you could find the folked project under <em>Projects--&gt;Your Projects</em></li><li>Private Project? :<ul><li><strong>Initial solution</strong><em>: Go to your forked Palabos project. You can make it private by set the Project visibility to </em>private<em>. (Go to </em>Setting --&gt; General --&gt; Visibility, project features, permissions --&gt; Project visibility*)</li><li>The above solution simply doesn't work as GitLab (at least the project with CI/CD) requires the forked project to be public or you have to be a member of the <code>UniGeSPC/Palabos</code>, in order to automatically merge the branch.</li><li>The <strong>Current Possible Solution</strong> (I haven't tried it myself) would be:<ul><li>forked from <code>UniGeSPC/palabos</code> as a public repository under the namespace A</li><li>Create A Group B (with the namespace B)</li><li>For your <code>A/palabos</code> into namespace B as <code>B/palabos</code> as a private repository.</li></ul></li></ul></li></ul><h2 id="branches">Branches</h2><p>There are four kinds of branches:</p><h3 id="master-branch">Master branch</h3><p>The <strong>master</strong> branch is simply used to save a copy of the <strong>UniGeSPC/palabos/master</strong>. Whenever this is a new release/update from the upstream, it should be merged to the <strong>master</strong> branch which is then merged to the <strong>develop</strong> branch.</p><p>As our own Palabos project is forked from the <strong>UniGeSPC/palabos</strong>, when we first clone the GitLab repository, our <strong>master</strong> branch should be synchronized with the <strong>UniGeSPC/palabos/master</strong>.</p><p>In order to track the official Palabos project, we need to add the <strong>UniGeSPC/palabos</strong> as the upstream <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add upstream https:&#x2F;&#x2F;gitlab.com&#x2F;unigespc&#x2F;palabos.git</span><br></pre></td></tr></table></figure> The upstream repository is shown when typing <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure> As only the master branch of the upstream repository matters, I modified my <em>.git/config</em> so that whenever I call <code>git fetch</code>, it only fetches the <strong>master</strong> branch instead of all branches. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;upstream&quot;]</span><br><span class="line">        url &#x3D; https:&#x2F;&#x2F;gitlab.com&#x2F;unigespc&#x2F;palabos.git</span><br><span class="line">        fetch &#x3D; +refs&#x2F;heads&#x2F;master:refs&#x2F;remotes&#x2F;upstream&#x2F;master</span><br></pre></td></tr></table></figure></p><p>When there is a new release in the upstream, fetch it and merge it into <strong>master</strong> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch upstream master</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge upstream&#x2F;master</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure> The <strong>master</strong> branch is then merged to the <strong>develop</strong> branch that is introduced later. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">$ git merge --no-ff master</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure></p><h3 id="develop-branch">Develop branch</h3><p>The <strong>develop</strong> branch is used for the development, including new features or algorithms. It is initially branched off from the <strong>master</strong> branch <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b develop master</span><br></pre></td></tr></table></figure></p><p>However, it may never be merged back to <strong>master</strong>. Instead, whenever <strong>master</strong> gets an update from the upstream, it should be merged to <strong>develop</strong> branch. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">$ git merge --no-ff master</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure> Remember here we always use the flag <code>--no-ff</code> to avoid fast-forward merge.</p><blockquote><p>The --no-ff flag causes the merge to always create a new commit object, even if the merge could be performed with a fast-forward. This avoids losing information about the historical existence of a feature branch and groups together all commits that together added the feature.</p></blockquote><h3 id="feature-branch">Feature branch</h3><p>The <strong>feature</strong> branch is used for both algorithm implementations and new functions/dataProcessors. It can be used for implementing both published and unpublished algorithms. The <strong>feature</strong> branch has a name convention <strong>feature-</strong>*. Whenever starting a new <strong>feature</strong>, it should be branched off from either the <strong>master</strong> branch or the <strong>develop</strong> branch.</p><p>When you want to implement an algorithm that would be contributed to the upstream Palabos repository, you should branch off the <strong>master</strong> branch: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-DESCRIPTION master</span><br></pre></td></tr></table></figure> Otherwise, you should branch off the <strong>develop</strong> branch: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-DESCRIPTION develop</span><br></pre></td></tr></table></figure></p><p>When the development of a new feature is done and tested, it should be merged to the <strong>develop</strong> branch. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">$ git merge --no-ff feature-DESCRIPTION</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure></p><p>If you want to <a href="https://gitlab.com/unigespc/palabos/blob/master/CONTRIBUTING.md">contribute</a> this new feature to Palabos, you can create a <a href="https://docs.gitlab.com/ee/gitlab-basics/add-merge-request.html"><code>merge request</code></a>.</p><p>You can also delete this branch once it is merged to both the <strong>develop</strong> branch and the official Palabos. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d feature-DESCRIPTION</span><br></pre></td></tr></table></figure></p><h3 id="bugfix-branch">bugFix branch</h3><p><strong>bugFix</strong> is used to fix bugs. It is suggested to open an issue for each bug your find. It could then be branched off from <strong>develop</strong> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b bugFix-issueX develop</span><br></pre></td></tr></table></figure> Once the bug is fixed, it should be merged back to the <strong>develop</strong> branch <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">$ git merge --no-ff bugFix-issueX</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure> However, the Palabos Group might also fix the bug in the upstream branches if you don't create a <code>merge request</code> for your <strong>bugFix</strong> branch. If this happens, you might have to solve the conflict manually when you fetch <strong>upstream/master</strong> into the local <strong>master</strong> and then merged to the <strong>develop</strong>.</p><h2 id="cicd">CI/CD</h2><p>The palabos repository has CI/CD to make it easier for integrating and testing the codes from different contributors. In general:</p><ul><li>GitLab CI/CD is configured by a file called <code>.gitlab-ci.yml</code>. You can find it in the palabos root directory.</li><li><code>.gitlab-ci.yml</code> defines the <strong>pipelines</strong> to be done.</li><li><strong><a href="https://docs.gitlab.com/ee/ci/pipelines/index.html">Pipelines</a></strong> is composed of<ul><li><strong>jobs</strong>: i.e., what to do (compiling, testing, etc.),</li><li><strong>Stages:</strong>: i.e., when to do.</li></ul></li><li>Jobs are excuted by <strong><a href="https://docs.gitlab.com/ee/ci/runners/README.html">Runners</a></strong></li></ul><p>I am totally new to CI/CD but only few things we need to do in order to make a successful merge request:</p><ul><li><a href="https://docs.gitlab.com/ee/ci/runners/README.html">Configuring GitLab Runner</a>: under project --&gt; <strong>Settings</strong> --&gt; <strong>CI/CD</strong> --&gt; <strong>Runners</strong> --&gt; <strong>Ennable shared Runners</strong>.</li><li>Then done! Once you've pushed your code to the repository, the pipeline will be automatically run.</li></ul><h2 id="conclusion">Conclusion</h2><p>Generally, this framework should work for most of our daily development and usage based on Palabos. My main doubt now is about the <strong>master</strong> branch. As it does nothing but saving a copy of the upstream, it seems reasonablbe to remove it. Everytime we see an new release from the upstream, the <strong>upstream/master</strong> could be directly merged in to the <strong>develop</strong> branch. However, the <strong>master</strong> branch is still kept for now to make the structure clearer.</p><p>Even though the workflow is not perfect, it allows us to maintain a customized Palabos while keeping the repository up-to-date with the upstream official Palabos. It is also easy to contribute to Palabos if you want. The flow diagram showed at the beginning is made based on <a href="https://nvie.com/posts/a-successful-git-branching-model/">Vincent Driessen</a>'s template. Don't be hesitate to leave a message if you have any comments or suggestions. Thank you.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://palabos.unige.ch/&quot;&gt;Palabos&lt;/a&gt; just released a new version (v2.1r0) and pushed everything on &lt;a href=&quot;https://gitlab.com/unigespc/palabos&quot;&gt;GitLab&lt;/a&gt;. This is something that all the Palabos community used to looking forward and makes it easier for the users to get official updates and contribute their own code. Personally, I would like to build my own Palabos version with in-house developed code while keeping updated from the official one. In this post, I am trying to talk about the Git workflow I use, which is mainly based on the &lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow&quot;&gt;Feature Branch Workflow&lt;/a&gt; and the &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;Git Workflow&lt;/a&gt;. &lt;img src=&quot;/images/20191217/PalabosGitFlow.jpg&quot; /&gt;
    
    </summary>
    
    
      <category term="Palabos" scheme="http://swang251.github.io/categories/Palabos/"/>
    
    
      <category term="Palabos" scheme="http://swang251.github.io/tags/Palabos/"/>
    
      <category term="Git" scheme="http://swang251.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
